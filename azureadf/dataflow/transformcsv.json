{
	"name": "transformcsv",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "reporting",
						"type": "DatasetReference"
					},
					"name": "sourcecsv"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "count",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "split1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Index as short,",
				"          {Customer Id} as string,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Company as string,",
				"          City as string,",
				"          Country as string,",
				"          {Phone 1} as string,",
				"          {Phone 2} as string,",
				"          Email as string,",
				"          {Subscription Date} as date,",
				"          Website as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcecsv",
				"sourcecsv select(mapColumn(",
				"          Index,",
				"          {Customer Id},",
				"          {First Name},",
				"          {Last Name},",
				"          Country,",
				"          {Subscription Date}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(Index<=25) ~> filter1",
				"filter1 split(Index>10,",
				"     disjoint: false) ~> split1@(valueless10, restindex10)",
				"split1@valueless10 aggregate(groupBy(Country),",
				"     Index = max(Index)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('dynamicRange', 2,",
				"          ERROR_FUNCTION('')",
				"     )) ~> sink1"
			]
		}
	}
}